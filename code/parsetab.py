
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '22CBCA2A93A85498FA195164C7C7A98E'
    
_lr_action_items = {'SEMICOLON':([2,4,6,13,24,32,33,34,35,36,39,41,43,44,45,46,49,53,66,71,76,77,80,83,84,85,86,87,89,93,97,99,103,107,110,],[9,-6,-5,-7,50,-18,-17,-8,-52,-36,-43,-53,-47,-31,-33,-56,-28,-26,-34,-54,-51,-29,-27,-35,-42,-50,-46,-30,-32,-25,-55,-9,-24,109,111,]),'READ':([9,14,16,50,73,79,82,95,96,102,],[-4,27,-3,27,27,27,-4,27,27,27,]),'NUM':([20,23,25,37,38,40,52,57,58,59,60,61,62,63,64,65,68,69,70,72,74,75,98,105,108,],[35,35,35,35,35,35,35,-41,-44,-38,35,-40,-45,-37,35,-39,-49,35,-48,35,35,35,35,35,35,]),'DO':([35,36,39,41,43,44,45,46,51,66,71,76,83,84,85,86,87,89,97,],[-52,-36,-43,-53,-47,-31,-33,-56,79,-34,-54,-51,-35,-42,-50,-46,-30,-32,-55,]),'THEN':([35,36,39,41,42,43,44,45,46,66,71,76,83,84,85,86,87,89,97,],[-52,-36,-43,-53,73,-47,-31,-33,-56,-34,-54,-51,-35,-42,-50,-46,-30,-32,-55,]),'CLPAR':([9,14,16,32,33,50,56,73,79,82,95,96,102,],[-4,22,-3,-18,-17,22,82,22,22,-4,22,22,22,]),'BOOL':([19,31,],[32,32,]),'$end':([1,3,15,47,],[-1,0,-2,-19,]),'EQUAL':([35,36,39,41,43,46,71,76,84,85,86,97,],[-52,63,-43,-53,-47,-56,-54,-51,-42,-50,-46,-55,]),'COLON':([11,12,18,54,],[-16,19,31,-11,]),'MUL':([35,39,41,43,46,71,76,84,85,86,97,],[-52,70,-53,-47,-56,-54,-51,70,-50,-46,-55,]),'ASSIGN':([26,],[52,]),'RETURN':([9,16,50,78,82,95,100,102,106,],[-4,-3,-23,-22,-4,-23,105,-23,108,]),'RPAR':([17,28,29,30,32,33,34,35,36,39,41,43,44,45,46,66,67,71,75,76,81,83,84,85,86,87,89,90,91,92,97,104,],[-13,-15,54,-12,-18,-17,-8,-52,-36,-43,-53,-47,-31,-33,-56,-34,85,-54,-58,-51,-14,-35,-42,-50,-46,-30,-32,97,-60,-57,-55,-59,]),'NOT':([20,23,25,37,38,52,72,74,75,98,105,108,],[37,37,37,37,37,37,37,37,37,37,37,37,]),'FUN':([0,9,22,82,],[5,5,5,5,]),'LPAR':([10,11,20,23,25,37,38,40,46,52,57,58,59,60,61,62,63,64,65,68,69,70,72,74,75,98,105,108,],[17,-16,38,38,38,38,38,38,75,38,-41,-44,-38,38,-40,-45,-37,38,-39,-49,38,-48,38,38,38,38,38,38,]),'OR':([35,36,39,41,42,43,44,45,46,49,51,66,67,71,76,80,83,84,85,86,87,89,91,97,104,107,110,],[-52,-36,-43,-53,72,-47,-31,-33,-56,72,72,-34,72,-54,-51,72,-35,-42,-50,-46,-30,-32,72,-55,72,72,72,]),'VAR':([0,9,22,82,],[7,7,7,7,]),'SUB':([20,23,25,35,36,37,38,39,40,41,43,46,52,57,58,59,60,61,62,63,64,65,68,69,70,71,72,74,75,76,83,84,85,86,97,98,105,108,],[40,40,40,-52,62,40,40,-43,40,-53,-47,-56,40,-41,-44,-38,40,-40,-45,-37,40,-39,-49,40,-48,-54,40,40,40,-51,62,-42,-50,-46,-55,40,40,40,]),'CRPAR':([15,47,48,94,101,109,112,],[-2,-19,77,99,-10,-21,-20,]),'IF':([9,14,16,50,73,79,82,95,96,102,],[-4,20,-3,20,20,20,-4,20,20,20,]),'AND':([35,36,39,41,43,44,45,46,66,71,76,83,84,85,86,87,89,97,],[-52,-36,-43,-53,-47,74,-33,-56,-34,-54,-51,-35,-42,-50,-46,74,-32,-55,]),'INT':([19,31,],[33,33,]),'GT':([35,36,39,41,43,46,71,76,84,85,86,97,],[-52,65,-43,-53,-47,-56,-54,-51,-42,-50,-46,-55,]),'LE':([35,36,39,41,43,46,71,76,84,85,86,97,],[-52,61,-43,-53,-47,-56,-54,-51,-42,-50,-46,-55,]),'BVAL':([20,23,25,37,38,40,52,57,58,59,60,61,62,63,64,65,68,69,70,72,74,75,98,105,108,],[41,41,41,41,41,41,41,-41,-44,-38,41,-40,-45,-37,41,-39,-49,41,-48,41,41,41,41,41,41,]),'END':([14,21,50,78,111,],[-23,47,-23,-22,112,]),'ELSE':([35,36,39,41,43,44,45,46,49,53,66,71,76,77,80,83,84,85,86,87,88,89,93,97,103,],[-52,-36,-43,-53,-47,-31,-33,-56,-28,-26,-34,-54,-51,-29,-27,-35,-42,-50,-46,-30,96,-32,-25,-55,-24,]),'GE':([35,36,39,41,43,46,71,76,84,85,86,97,],[-52,57,-43,-53,-47,-56,-54,-51,-42,-50,-46,-55,]),'ADD':([35,36,39,41,43,46,71,76,83,84,85,86,97,],[-52,58,-43,-53,-47,-56,-54,-51,58,-42,-50,-46,-55,]),'WHILE':([9,14,16,50,73,79,82,95,96,102,],[-4,25,-3,25,25,25,-4,25,25,25,]),'BEGIN':([0,8,9,16,22,82,95,],[-4,14,-4,-3,-4,-4,102,]),'ID':([5,7,9,14,16,17,20,23,25,27,37,38,40,50,52,55,57,58,59,60,61,62,63,64,65,68,69,70,72,73,74,75,79,82,95,96,98,102,105,108,],[11,11,-4,26,-3,11,46,46,46,53,46,46,46,26,46,11,-41,-44,-38,46,-40,-45,-37,46,-39,-49,46,-48,46,26,46,46,26,-4,26,26,46,26,46,46,]),'DIV':([35,39,41,43,46,71,76,84,85,86,97,],[-52,68,-53,-47,-56,-54,-51,68,-50,-46,-55,]),'COMMA':([28,30,32,33,34,35,36,39,41,43,44,45,46,66,71,76,81,83,84,85,86,87,89,91,92,97,104,],[-15,55,-18,-17,-8,-52,-36,-43,-53,-47,-31,-33,-56,-34,-54,-51,-14,-35,-42,-50,-46,-30,-32,-60,98,-55,-59,]),'PRINT':([9,14,16,50,73,79,82,95,96,102,],[-4,23,-3,23,23,23,-4,23,23,23,]),'LT':([35,36,39,41,43,46,71,76,84,85,86,97,],[-52,59,-43,-53,-47,-56,-54,-51,-42,-50,-46,-55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'fun_body':([95,],[101,]),'arguments':([75,],[90,]),'type':([19,31,],[34,56,]),'block':([0,22,],[1,48,]),'declaration':([0,9,22,82,],[2,2,2,2,]),'param_list':([10,],[18,]),'int_expr':([20,23,25,37,38,52,60,72,74,75,98,105,108,],[36,36,36,36,36,36,83,36,36,36,36,36,36,]),'parameters1':([17,],[30,]),'prog_stmt':([14,50,73,79,95,96,102,],[24,24,88,93,24,103,24,]),'compare_op':([36,],[60,]),'basic_var_declaration':([7,17,55,],[13,28,81,]),'var_declaration':([0,9,22,82,],[6,6,6,6,]),'mulop':([39,84,],[69,69,]),'arguments1':([75,],[92,]),'int_term':([20,23,25,37,38,52,60,64,72,74,75,98,105,108,],[39,39,39,39,39,39,39,84,39,39,39,39,39,39,]),'identifier':([5,7,17,55,],[10,12,12,12,]),'parameters':([17,],[29,]),'expr':([20,23,25,38,52,75,98,105,108,],[42,49,51,67,80,91,104,107,110,]),'addop':([36,83,],[64,64,]),'int_factor':([20,23,25,37,38,40,52,60,64,69,72,74,75,98,105,108,],[43,43,43,43,43,71,43,43,43,86,43,43,43,43,43,43,]),'program_body':([8,],[15,]),'fun_block':([82,],[94,]),'prog':([0,],[3,]),'bint_term':([20,23,25,38,52,72,75,98,105,108,],[44,44,44,44,44,87,44,44,44,44,]),'bint_factor':([20,23,25,37,38,52,72,74,75,98,105,108,],[45,45,45,66,45,45,45,89,45,45,45,45,]),'fun_declaration':([0,9,22,82,],[4,4,4,4,]),'argument_list':([46,],[76,]),'declarations':([0,9,22,82,],[8,16,8,95,]),'prog_stmts':([14,50,95,102,],[21,78,100,106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> block','prog',1,'p_prog','parseryacc.py',9),
  ('block -> declarations program_body','block',2,'p_block','parseryacc.py',14),
  ('declarations -> declaration SEMICOLON declarations','declarations',3,'p_declarations','parseryacc.py',19),
  ('declarations -> <empty>','declarations',0,'p_declarations','parseryacc.py',20),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parseryacc.py',29),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parseryacc.py',30),
  ('var_declaration -> VAR basic_var_declaration','var_declaration',2,'p_var_declaration','parseryacc.py',34),
  ('basic_var_declaration -> identifier COLON type','basic_var_declaration',3,'p_basic_var_declaration','parseryacc.py',39),
  ('fun_declaration -> FUN identifier param_list COLON type CLPAR fun_block CRPAR','fun_declaration',8,'p_fun_declaration','parseryacc.py',44),
  ('fun_block -> declarations fun_body','fun_block',2,'p_fun_block','parseryacc.py',52),
  ('param_list -> LPAR parameters RPAR','param_list',3,'p_param_list','parseryacc.py',59),
  ('parameters -> parameters1','parameters',1,'p_parameters','parseryacc.py',63),
  ('parameters -> <empty>','parameters',0,'p_parameters','parseryacc.py',64),
  ('parameters1 -> parameters1 COMMA basic_var_declaration','parameters1',3,'p_parammeters1','parseryacc.py',69),
  ('parameters1 -> basic_var_declaration','parameters1',1,'p_parammeters1','parseryacc.py',70),
  ('identifier -> ID','identifier',1,'p_identifier','parseryacc.py',78),
  ('type -> INT','type',1,'p_type','parseryacc.py',82),
  ('type -> BOOL','type',1,'p_type','parseryacc.py',83),
  ('program_body -> BEGIN prog_stmts END','program_body',3,'p_program_body','parseryacc.py',93),
  ('fun_body -> BEGIN prog_stmts RETURN expr SEMICOLON END','fun_body',6,'p_fun_body','parseryacc.py',98),
  ('fun_body -> prog_stmts RETURN expr SEMICOLON','fun_body',4,'p_fun_body','parseryacc.py',99),
  ('prog_stmts -> prog_stmt SEMICOLON prog_stmts','prog_stmts',3,'p_prog_stmts','parseryacc.py',116),
  ('prog_stmts -> <empty>','prog_stmts',0,'p_prog_stmts','parseryacc.py',117),
  ('prog_stmt -> IF expr THEN prog_stmt ELSE prog_stmt','prog_stmt',6,'p_prog_stmt','parseryacc.py',125),
  ('prog_stmt -> WHILE expr DO prog_stmt','prog_stmt',4,'p_prog_stmt','parseryacc.py',126),
  ('prog_stmt -> READ ID','prog_stmt',2,'p_prog_stmt','parseryacc.py',127),
  ('prog_stmt -> ID ASSIGN expr','prog_stmt',3,'p_prog_stmt','parseryacc.py',128),
  ('prog_stmt -> PRINT expr','prog_stmt',2,'p_prog_stmt','parseryacc.py',129),
  ('prog_stmt -> CLPAR block CRPAR','prog_stmt',3,'p_prog_stmt','parseryacc.py',130),
  ('expr -> expr OR bint_term','expr',3,'p_expr','parseryacc.py',160),
  ('expr -> bint_term','expr',1,'p_expr','parseryacc.py',161),
  ('bint_term -> bint_term AND bint_factor','bint_term',3,'p_bint_term','parseryacc.py',171),
  ('bint_term -> bint_factor','bint_term',1,'p_bint_term','parseryacc.py',172),
  ('bint_factor -> NOT bint_factor','bint_factor',2,'p_bint_factor','parseryacc.py',180),
  ('bint_factor -> int_expr compare_op int_expr','bint_factor',3,'p_bint_factor','parseryacc.py',181),
  ('bint_factor -> int_expr','bint_factor',1,'p_bint_factor','parseryacc.py',182),
  ('compare_op -> EQUAL','compare_op',1,'p_compare_op','parseryacc.py',198),
  ('compare_op -> LT','compare_op',1,'p_compare_op','parseryacc.py',199),
  ('compare_op -> GT','compare_op',1,'p_compare_op','parseryacc.py',200),
  ('compare_op -> LE','compare_op',1,'p_compare_op','parseryacc.py',201),
  ('compare_op -> GE','compare_op',1,'p_compare_op','parseryacc.py',202),
  ('int_expr -> int_expr addop int_term','int_expr',3,'p_int_expr','parseryacc.py',218),
  ('int_expr -> int_term','int_expr',1,'p_int_expr','parseryacc.py',219),
  ('addop -> ADD','addop',1,'p_addop','parseryacc.py',228),
  ('addop -> SUB','addop',1,'p_addop','parseryacc.py',229),
  ('int_term -> int_term mulop int_factor','int_term',3,'p_int_term','parseryacc.py',236),
  ('int_term -> int_factor','int_term',1,'p_int_term','parseryacc.py',237),
  ('mulop -> MUL','mulop',1,'p_mulop','parseryacc.py',247),
  ('mulop -> DIV','mulop',1,'p_mulop','parseryacc.py',248),
  ('int_factor -> LPAR expr RPAR','int_factor',3,'p_int_factor','parseryacc.py',256),
  ('int_factor -> ID argument_list','int_factor',2,'p_int_factor','parseryacc.py',257),
  ('int_factor -> NUM','int_factor',1,'p_int_factor','parseryacc.py',258),
  ('int_factor -> BVAL','int_factor',1,'p_int_factor','parseryacc.py',259),
  ('int_factor -> SUB int_factor','int_factor',2,'p_int_factor','parseryacc.py',260),
  ('argument_list -> LPAR arguments RPAR','argument_list',3,'p_argument_list','parseryacc.py',285),
  ('argument_list -> <empty>','argument_list',0,'p_argument_list','parseryacc.py',286),
  ('arguments -> arguments1','arguments',1,'p_arguments','parseryacc.py',295),
  ('arguments -> <empty>','arguments',0,'p_arguments','parseryacc.py',296),
  ('arguments1 -> arguments1 COMMA expr','arguments1',3,'p_arguments1','parseryacc.py',301),
  ('arguments1 -> expr','arguments1',1,'p_arguments1','parseryacc.py',302),
]
